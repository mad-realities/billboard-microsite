diff --git a/scripts/community.ts b/scripts/community.ts
index 19e2f76..bcbb311 100644
--- a/scripts/community.ts
+++ b/scripts/community.ts
@@ -1,7 +1,7 @@
 import fetch from "node-fetch";
 import * as dotenv from "dotenv"; // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import
-import { incrementCount, trackGauge } from "./datadog";
-import { delay } from "./utils";
+import { delay } from "./script";
+import { trackGauge } from "./datadog";
 
 dotenv.config({
   path: ".env.local",
@@ -53,35 +53,6 @@ function get_community_ids_that_messaged_since_date_from_chats(since_date: Date,
   return community_ids;
 }
 
-export async function dm(fanId: string, text: string, shorten_links: boolean = false) {
-  try {
-    const url = `https://api.community.com/client-dashboard/v2/edefb05a-ec9b-40ac-a3fd-7b2459d195cb/messaging/dm`;
-    const payload = {
-      text: text,
-      fan_id: fanId,
-      shorten_links: shorten_links,
-    };
-    const response = await fetch(url, {
-      body: JSON.stringify(payload),
-      headers: headers,
-      method: "POST",
-    });
-
-    if (response.status === 201) {
-      incrementCount("community.dm.success", 1, ["success"]);
-      return true;
-    } else {
-      console.error("Error Sending DM: ", response.status, response.statusText);
-      incrementCount("community.dm.success", 1, ["failure"]);
-      return false;
-    }
-  } catch (e) {
-    console.error("Error Sending DM", e);
-    incrementCount("community.dm.success", 1, ["failure"]);
-    return false;
-  }
-}
-
 async function get_community_ids_that_messaged_since_date(since_date: Date) {
   let pageNumber = 1;
   const chats = await get_50_chats(pageNumber);
@@ -328,7 +299,14 @@ function hasWordAfterKeyword(str: string, keyword: string) {
 }
 
 async function main() {
-  // const response = await dm("58704615-37e5-4148-804c-e675f5107968", "gm gm");
+  const str1 = "vote    ";
+  const str2 = "word vote dpromise word";
+  const str3 = "vote";
+
+  console.log(str1, hasWordAfterKeyword(str1, "vote "));
+  console.log(str2, hasWordAfterKeyword(str2, "vote "));
+  console.log(str3, hasWordAfterKeyword(str3, "vote "));
+
   // const dateSince = addDays(new Date(), -1);
   // console.log(dateSince);
   // const community_ids = await get_community_ids_that_messaged_since_date(dateSince);
diff --git a/scripts/datadog.ts b/scripts/datadog.ts
index 606d2fd..3101967 100644
--- a/scripts/datadog.ts
+++ b/scripts/datadog.ts
@@ -10,7 +10,7 @@ const datadog = new v2.MetricsApi(client.createConfiguration());
 // as the DogStatsD client. This can degrade application performance under load. We should consider
 // using https://github.com/dbader/node-datadog-metrics (which wraps @datadog/datadog-api-client) instead.
 
-export const incrementCount = async (metricName: string, value: number, extraTags: string[] = []) => {
+export const incrementCount = async (metricName: string, value: number) => {
   const params: v2.MetricsApiSubmitMetricsRequest = {
     body: {
       series: [
@@ -23,7 +23,7 @@ export const incrementCount = async (metricName: string, value: number, extraTag
               value,
             },
           ],
-          tags: [process.env.NODE_ENV || "", "billboard", "v1", ...extraTags],
+          tags: [process.env.NODE_ENV || "", "billboard", "v1"],
         },
       ],
     },
diff --git a/scripts/script.ts b/scripts/script.ts
index 258a5a3..5d3a083 100644
--- a/scripts/script.ts
+++ b/scripts/script.ts
@@ -1,11 +1,10 @@
 import { PrismaClient } from "@prisma/client";
 import * as dotenv from "dotenv"; // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import
-import { dm, getKeywordMessages, getMessagesSinceDate, getVotesFromMessages, getVotesSinceDate } from "./community";
+import { getKeywordMessages, getMessagesSinceDate, getVotesFromMessages, getVotesSinceDate } from "./community";
 import { isValidUsername } from "./igData";
 import { incrementCount } from "./datadog";
 import { triggerCommunityMessageZap } from "./zapier";
 import { mixpanel, VOTED } from "./mixpanel";
-import { delay } from "./utils";
 
 dotenv.config({
   path: ".env.local",
@@ -85,10 +84,11 @@ export async function runScript(withDelay = false) {
     const { communityIdMessageMap, communityIdToFanSubscriptionId } = await getMessagesSinceDate(dateSinceLastRun);
 
     const badVoteMessage = await getKeywordMessages(communityIdMessageMap, "vote ", true);
+    console.log("voteMessages", badVoteMessage);
 
     // getVotesSinceDate picks up the latest vote per communityId since the last script run
     const userVotesMap = await getVotesFromMessages(communityIdMessageMap, communityIdToFanSubscriptionId);
-    console.log("userVoteMap", userVotesMap);
+    console.log("userMap", userVotesMap);
 
     const allUserVotes = Object.keys(userVotesMap)
       .map((community_id) => {
@@ -138,7 +138,6 @@ export async function runScript(withDelay = false) {
     });
 
     const badVoteZapierPayload = badVotesIds.map((val) => ({
-      communityId: val,
       fanId: communityIdToFanSubscriptionId[val],
       text: `Oops! That didn't work... If you're trying to vote for an existing candidate or nominate a new one, use the format below:\n\nVOTE: [insert IG username]\n\nText "3" for help voting.`,
     }));
@@ -149,23 +148,19 @@ export async function runScript(withDelay = false) {
     const successfulZapierPayload = validUserVotesWithExistingHandles.map((val) => {
       if (communityIdToVoteCount[val.community_id]) {
         return {
-          communityId: val.community_id,
           fanId: communityIdToFanSubscriptionId[val.community_id],
           text: `SUCCESS! You also voted for ${val.vote}. You can see the rank of their username by clicking the link below. https://billboard.madrealities.xyz/profile/${val.vote}`,
         };
       } else {
         communityIdToVoteCount[val.community_id] = true;
         return {
-          communityId: val.community_id,
           fanId: communityIdToFanSubscriptionId[val.community_id],
           text: `SUCCESS! Thanks for exercising your civic duty in the Mad Realities Universe by casting your vote. You can see the rank of the username you nominated or voted for by clicking the link below. Share and rack up as many votes as you can to get to #1! https://billboard.madrealities.xyz/profile/${val.vote}`,
         };
       }
     });
 
-    console.log("communityIdToFanSubscriptionId", communityIdToFanSubscriptionId);
-
-    // triggerCommunityMessageZap([...successfulZapierPayload, ...badVoteZapierPayload]);
+    triggerCommunityMessageZap([...successfulZapierPayload, ...badVoteZapierPayload]);
     incrementCount("scriptRuns", 1);
     incrementCount("votes", validUserVotesWithExistingHandles.length);
     for (const vote of validUserVotesWithExistingHandles) {
@@ -178,7 +173,6 @@ export async function runScript(withDelay = false) {
 
     // create new script run
     const scriptRun = await saveVotesToDB(validUserVotesWithExistingHandles);
-    await sendMessages([...successfulZapierPayload, ...badVoteZapierPayload]);
     return scriptRun;
   } else {
     const new_script_run = await createEmptyScriptRun();
@@ -186,28 +180,8 @@ export async function runScript(withDelay = false) {
   }
 }
 
-runScript();
-
-export async function sendMessages(
-  payload: {
-    fanId: string;
-    text: string;
-    communityId: string;
-  }[],
-) {
-  console.log("Sending messages", payload);
-  let count = 0;
-  // serial loop through payload, pause for .3-.7 seconds betwee, send dm for each
-  for (const message of payload) {
-    const randomDelay = Math.floor(Math.random() * 400) + 300;
-    await delay(randomDelay);
-    const response = await dm(message.communityId, message.text);
-    if (response) {
-      count++;
-    } else {
-      console.log("Error sending message", message);
-    }
-  }
-
-  console.log("Sent", count, "messages out of ", payload.length);
+export function delay(ms: number) {
+  return new Promise((resolve) => setTimeout(resolve, ms));
 }
+
+runScript();
diff --git a/scripts/utils.ts b/scripts/utils.ts
deleted file mode 100644
index 98eaa4f..0000000
--- a/scripts/utils.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export function delay(ms: number) {
-  return new Promise((resolve) => setTimeout(resolve, ms));
-}
