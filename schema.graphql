"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy(
  """
  The URL that specifies the behavior of this scalar.
  """
  url: String!
) on SCALAR

type Channel implements Node {
  createdAt: Date!
  current_slot: [Slot!]!
  default_media: MediaReference
  description: String!
  id: ID!
  name: String!
  next_slot: [Slot!]!
  programs: [Program!]!
  seasons: [Season!]!
  slots: [Slot!]!
}

input CreateChannelInput {
  description: String!
  name: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum LeaderboardFunction {
  VIEWS
  VIEW_TIME
}

type MediaReference implements Node {
  defaultChannels: [Channel!]!
  description: String
  id: ID!
  playback_id: String
  service: String!
  serviceId: String!
  serviceMetadata: String
  slot: Slot
  status: String
  streamKey: String
  title: String!
  type: MediaType!
  views: Int!
  webUrl: String
}

enum MediaType {
  LIVE
  PRERECORDED
  WEB_INPUT_BROADCAST
}

type Mutation {
  createChannel(input: CreateChannelInput!): Channel!
  createMediaReference(
    description: String!
    service_id: String!
    service_metadata: String
    slot_id: ID
    title: String!
    type: MediaType!
  ): MediaReference!
  createOrUpdatePushNotificationToken(token: String!): PushNotificationToken!
  createOrUpdateUser(id: ID!, phone_number: String, wallet_address: String): User!
  createProgram(channel: ID!, end_time: Date!, season: ID!, start_time: Date!): Program!
  createSeason(
    channel: ID!
    end_date: Date!
    leaderboardFunction: LeaderboardFunction! = VIEWS
    name: String!
    start_date: Date!
  ): Season!
  createSlot(
    channel: ID!
    end_time: DateTime
    name: String!
    nft_id: String!
    season: ID
    seconds: Int
    start_time: DateTime!
  ): Slot!
  deleteChannel(input: ID!): Channel!
  deleteMediaReference(input: ID!): MediaReference!
  deleteProgram(input: ID!): Program!
  deletePushNotificationToken(token: String!): PushNotificationToken!
  deleteSeason(input: ID!): Season!
  deleteSlot(input: ID!): Slot!
  setChannelDefaultMedia(channelId: ID!, mediaId: ID!): Channel!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Program implements Node {
  createdAt: Date!
  endDate: Date!
  id: ID!
  slots: [Slot!]!
  startDate: Date!
}

type PushNotificationToken implements Node {
  id: ID!
  token: String!
}

type Query {
  channel(input: ID!): Channel!
  channels: [Channel!]!
  mediaReference(input: ID!): MediaReference!
  mediaReferences(type: MediaType): [MediaReference!]!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  pushNotificationTokens: [PushNotificationToken!]!
  season(input: ID!): Season!
  seasons: [Season!]!
  slot(input: ID!): Slot!
  user(input: ID!): User!
  users: [User!]!
}

type Season implements Node {
  channel(after: String, before: String, first: Int, last: Int): SeasonChannelConnection!
  createdAt: Date!
  endDate: Date!
  id: ID!
  leaderboard_function: String!
  name: String!
  programs: [Program!]!
  slots: [Slot!]!
  startDate: Date!
}

type SeasonChannelConnection {
  edges: [SeasonChannelConnectionEdge]!
  pageInfo: PageInfo!
}

type SeasonChannelConnectionEdge {
  cursor: String!
  node: Channel!
}

type Slot implements Node {
  channel: Channel!
  createdAt: Date!
  endTime: DateTime!
  id: ID!
  media: MediaReference
  name: String!
  startTime: DateTime!
}

type User implements Node {
  id: ID!
  phone_number: String
  wallet_address: String
}
